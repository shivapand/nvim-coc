return {
  "hrsh7th/nvim-cmp",
  event = "InsertEnter",
  dependencies = {
    -- Snippet Engine & its associated nvim-cmp source
    {
      "L3MON4D3/LuaSnip",
      build = "make install_jsregexp",
    },
    "saadparwaiz1/cmp_luasnip",

    -- Adds LSP completion capabilities
    "hrsh7th/cmp-nvim-lsp",

    -- Adds file path completion capabilities
    "hrsh7th/cmp-path",

    -- Adds buffer completion capabilities
    "hrsh7th/cmp-buffer",

    -- Friendly snippets
    "rafamadriz/friendly-snippets",

    -- Icons
    "onsails/lspkind.nvim",
  },
  config = function()
    local cmp = require("cmp")
    local luasnip = require("luasnip")
    require("luasnip.loaders.from_vscode").lazy_load()
    luasnip.config.setup({})

    cmp.setup({
      formatting = {
        format = require('lspkind').cmp_format({
          mode = 'symbol_text', -- show symbol and text
          maxwidth = 50,        -- truncate text if it's too long
          menu = {
            buffer = "[Buffer]",
            nvim_lsp = "[LSP]",
            luasnip = "[Snippet]",
            path = "[Path]",
          }
        })
      },
      snippet = {
        expand = function(args)
          luasnip.lsp_expand(args.body)
        end,
      },
      completion = {
        completeopt = "menu,menuone,noinsert",
      },
      mapping = cmp.mapping.preset.insert({
        ["<C-Space>"] = cmp.mapping.complete(),
        ["<C-e>"] = cmp.mapping.abort(),
        ["<CR>"] = cmp.mapping.confirm({ select = true }),
        ["<Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          else
            fallback()
          end
        end, { "i", "s" }),
        ["<S-Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, { "i", "s" }),
      }),
      -- The same sources you had with blink.cmp
      sources = {
        { name = "buffer" },
        {
          name = "nvim_lsp",
          entry_filter = function(entry, ctx)
            -- only check emmet-ls completions
            if entry.source.name == "nvim_lsp" and entry.completion_item.detail == "Emmet Abbreviation" then
              local before_cursor = ctx.cursor_before_line
              -- block when typing something like x.y: (variable/prop style)
              if before_cursor:match("[%w_]+%.[%w_]*:?$") then
                return false
              end
            end
            return true
          end,
        },
        { name = "luasnip" },
        { name = "path" },
      },
    })
  end,
}
